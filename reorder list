/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
     /*   if(head==null || head.next==null || head.next.next==null){
            return;
        }
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next==null){
            slow=slow.next;
            fast=fast.next.next;
        }
        ListNode sh=slow.next;
        slow.next=null;
        ListNode curr=sh;
        ListNode prev=null;
        while(curr!=null){

            ListNode nextNode=curr.next;
            curr.next=prev;
            prev=curr;
            curr=nextNode;
        }
        ListNode t1=head;
        ListNode t2=prev;
        while(t2!=null){

            ListNode m1=t1.next;
            ListNode m2=t2.next;
            t1.next=t2;
            t2.next=m1;
            t1=m1;
            t2=m2;
        }
      */
           if(head == null || head.next == null)   return;

        // finding the mid element
        ListNode fast = head;
        ListNode slow = head;
        while(fast!= null && fast.next!= null){
            fast = fast.next.next;
            slow = slow.next;
        }

        // reversing the list after mid
        ListNode curr = slow;
        ListNode prev = null;
        ListNode dummy;
        while(curr != null){
            dummy = curr.next;
            curr.next = prev;
            prev = curr;
            curr = dummy;
        }

        // merging the 2 lists
        ListNode first = head;
        ListNode second = prev;
        ListNode temp;
        while(second.next != null){
            temp = first.next;
            first.next = second;
            first = temp;

            temp = second.next;
            second.next = first;
            second = temp;
        }
        
    }
}
